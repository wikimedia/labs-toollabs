#!/usr/bin/python3 -Es
# -*- coding: utf-8 -*-
#
# Submit a job to the job grid.
#
# Copyright © 2013 Marc-André Pelletier <mpelletier@wikimedia.org>
# Copyright © 2017 Wikimedia Foundation and contributors
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import argparse
import copy
import os
import pipes
import pwd
import re
import subprocess
import sys
import textwrap
import time


AVAILABLE_RELEASES = ["stretch", "buster"]
DEFAULT_RELEASE = "stretch"


class NonAbbreviatingArgumentParser(argparse.ArgumentParser):
    """ArgumentParser that doesn't process abbreviated arguments.

    From https://bugs.python.org/issue14910#msg204678
    """

    def _get_option_tuples(self, option_string):
        return []


class ThrowingArgumentParser(NonAbbreviatingArgumentParser):
    """ArgumentParser subclass that throws errors rather than exiting.

    From https://stackoverflow.com/a/14728477/8171
    """

    def error(self, message):
        raise ValueError(message)


def argparse_memkb(val):
    """Parses an XXK, XXm, XXg to the # of kilobytes.

    >>> __name__ = 'doctest'
    >>> exec(open('jobutils/bin/jsub').read())
    >>> argparse_memkb('1k')
    1
    >>> argparse_memkb('1M')
    1024
    >>> argparse_memkb('2g')
    2097152
    >>> argparse_memkb('pizza') # doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: expected ... 'k', 'm' or 'g'. 'pizza' given.
    >>>
    """
    m = re.match(r"(?i)^(?P<digits>\d+)(?P<si>[kmg])$", val)
    if m is None:
        raise argparse.ArgumentTypeError(
            ("expected an integer followed by " "'k', 'm' or 'g'. '%s' given.")
            % val
        )
    ret = int(m.group("digits"))
    si = m.group("si").lower()
    if si in ["m", "g"]:
        ret *= 1024
    if si == "g":
        ret *= 1024
    return ret


def argparse_octal(val):
    """Validate and convert an octal string value to an int.

    >>> __name__ = 'doctest'
    >>> exec(open('jobutils/bin/jsub').read())
    >>> argparse_octal('0777')
    511
    >>> argparse_octal('9')
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: expected an octal value. '9' given.
    >>>
    """
    if not re.match(r"^[0-7]+$", val):
        raise argparse.ArgumentTypeError(
            "expected an octal value. '%s' given." % val
        )
    return int(val, 8)


def argparse_email(val):
    """Validate a list of email addresses.

    >>> __name__ = 'doctest'
    >>> exec(open('jobutils/bin/jsub').read())
    >>> argparse_email('example@example.com')
    'example@example.com'
    >>> argparse_email('example@example.com,another@example.org')
    'example@example.com,another@example.org'
    >>> argparse_email('foo')
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: expected list of email addresses. 'foo' given.
    >>>
    """
    if not re.match(r"^[^@]+@[^,]+(,[^@]+@[^,]+)*$", val):
        raise argparse.ArgumentTypeError(
            "expected list of email addresses. '%s' given." % val
        )
    return val


def argparse_qsub_bool(val):
    """Validate and coerce a qsub-style boolean value.

    >>> __name__ = 'doctest'
    >>> exec(open('jobutils/bin/jsub').read())
    >>> argparse_qsub_bool('y')
    True
    >>> argparse_qsub_bool('yES')
    True
    >>> argparse_qsub_bool('n')
    False
    >>> argparse_qsub_bool('NO')
    False
    >>> argparse_qsub_bool('foo')
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: expected y[es]|n[o]. 'foo' given.
    >>>
    """
    if not re.match(r"^y(es)?|no?$", val.lower()):
        raise argparse.ArgumentTypeError(
            "expected y[es]|n[o]. '%s' given." % val
        )
    return val.lower()[0] == "y"


def argparse_whence(prog):
    """Resolve the canonical path to a program.

    Symbolic links are not resolved (T229551).

    >>> __name__ = 'doctest'
    >>> exec(open('jobutils/bin/jsub').read())
    >>> argparse_whence('/usr/bin/env')
    '/usr/bin/env'
    >>> argparse_whence('env')
    '/usr/bin/env'
    >>> argparse_whence('jsub.notfound')
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: Program 'jsub.notfound' not found.
    >>>
    """
    # Already a full path?
    if prog[0] == os.sep and os.path.exists(prog):
        return os.path.normpath(prog)
    if prog[0] != os.curdir:
        # Look in each dir of $PATH
        for path in os.environ.get("PATH", "").split(os.pathsep):
            if os.path.exists(os.path.join(path, prog)):
                return os.path.normpath(os.path.join(path, prog))
    # Not found in $PATH so try looking in $PWD
    if os.path.exists(os.path.join(os.getcwd(), prog)):
        return os.path.normpath(os.path.join(os.getcwd(), prog))
    raise argparse.ArgumentTypeError("Program '%s' not found." % prog)


def split_l(value):
    """Iterate over compontents of qsub's '-l resource=value,...' arguments."""
    for part in value.split(","):
        yield part.split("=", 1)
    return


def argparse_resource(value):
    """Validate qsub's '-l resource=value,...' arguments."""
    for label, val in split_l(value):
        if label == "release" and val not in AVAILABLE_RELEASES:
            raise argparse.ArgumentTypeError(
                "invalid release=%s. Expected release=[%s]."
                % (val, "|".join(AVAILABLE_RELEASES))
            )
    return value


class QsubAction(argparse.Action):
    """Handle argparse arguments that will be passed through to qsub.

    Generally acts like argparse's built-in 'append' action, but it gives
    special handling to '-l ...' arguments.
    """

    def __init__(self, *args, **kwargs):
        super(QsubAction, self).__init__(*args, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        if option_string == "-l":
            self._process_l(namespace, values[0])
        else:
            if self.nargs != 0 and type(values) is list:
                values = values[0]
            self._append(namespace, values, option_string)

    def _process_l(self, namespace, values):
        """Process qsub's insane '-l resource=value,...' options.

        Some settings are intercepted and processed specially:
        * h_vmem=value : adjust '-mem'
        * virtual_free=value : adjust '-mem'
        * release=value : adjust '-release'

        Other resource=value pairs are stored unaltered except they are
        expanded so each 'resource=value' pair is attached to its own '-l'
        flag.
        """
        for resource, value in split_l(values):
            if resource == "release":
                setattr(namespace, "release", value)
            elif resource == "h_vmem":
                vmem = argparse_memkb(value)
                if vmem > namespace.mem:
                    setattr(namespace, "mem", vmem)
            elif resource == "virtual_free":
                vfree = int(argparse_memkb(value) * 1.1)
                if vfree > namespace.mem:
                    namespace.mem = vfree
            else:
                self._append(namespace, "%s=%s" % (resource, value), "-l")

    def _ensure_value(self, namespace, name, value):
        """Get a value from the namespace."""
        if getattr(namespace, name, None) is None:
            setattr(namespace, name, value)
        return getattr(namespace, name)

    def _append(self, namespace, values, option_string):
        """Accumulate options and their args in a namespace array."""
        items = copy.copy(self._ensure_value(namespace, self.dest, []))
        items.append(option_string)
        if self.nargs != 0:
            items.append(values)
        setattr(namespace, self.dest, items)


def effective_username():
    """Get the username of the effective user."""
    return os.environ.get(
        "LOGNAME", os.environ.get("USER", pwd.getpwuid(os.getuid())[0])
    )


def homedir():
    """Get the homedir of the real user.

    Relies on the HOME environment variable if set, else fall back to the
    system password database.
    """
    return os.environ.get("HOME", pwd.getpwuid(os.getuid())[5])


def die(msg):
    """Exit with an error status and the provided message."""
    sys.exit("[%s] %s" % (time.ctime(), msg))


def touch(path, umask):
    """Touch the named file if it doesn't already exist."""
    if not os.path.exists(path):
        old_mask = os.umask(umask)
        try:
            open(path, "a").close()
        except IOError as e:
            die("Failed to touch '%s': %s" % (path, e))
        finally:
            os.umask(old_mask)


def is_running(name):
    """Check status of a named job."""
    try:
        running = subprocess.call(["/usr/bin/job", "-q", name])
    except OSError as e:
        die("unable to get job status: e" % e)
    else:
        return running != 0


def as_qsub_bool(val):
    """Make a 'yes' or 'no' for passing to qsub."""
    if val:
        return "yes"
    else:
        return "no"


def make_cmd(exe, args):
    """Join a executable and a possibly empty list of arguments."""
    cmd = [exe]
    if args:
        cmd.extend(args)
    return cmd


def build_qsub_argparser():
    """Build an argparse parser that understands qsub arguments.

    This parser tries to do most of the heavy lifting for dealing with the
    wide range of arguments that are handled by qsub. As such it does some
    "interesting" things. Usage of the QsubAction custom action is probably
    the most interesting.

    The generated parser is a suitable for use as a parent parser for another
    ArgumentParser instance.
    """
    parser = NonAbbreviatingArgumentParser(add_help=False)
    # The time and date at which the job is eligible for execution.
    parser.add_argument(
        "-a",
        nargs=1,
        metavar="[[CC]]YY]MMDDhhmm[.SS]",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # Treat the program as a binary.
    parser.add_argument(
        "-b",
        metavar="y[es]|n[o]",
        dest="binary",
        type=argparse_qsub_bool,
        default=False,
        help=argparse.SUPPRESS,
    )
    # Execute the job from the current working directory.
    parser.add_argument(
        "-cwd",
        nargs=0,
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # The path used for the standard error stream of the job
    parser.add_argument(
        "-e", metavar="path", dest="log_err", help=argparse.SUPPRESS
    )
    # Signifies that all -q and -l resource requirements following in the
    # command line will be hard requirements and must be satisfied in full
    # before a job can be scheduled.
    parser.add_argument(
        "-hard",
        nargs=0,
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # The file used for the standard input stream of the job.
    parser.add_argument(
        "-i",
        nargs=1,
        metavar="[[hostname]:]file,...",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # Merge standard error stream into the standard ouput stream.
    parser.add_argument(
        "-j",
        metavar="y[es]|n[o]",
        dest="log_join",
        type=argparse_qsub_bool,
        default=False,
        help=argparse.SUPPRESS,
    )
    # Launch the job in a queue meeting the given resource request list.
    parser.add_argument(
        "-l",
        nargs=1,
        metavar="resource=value,...",
        action=QsubAction,
        type=argparse_resource,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # Under which circumstances mail is to be sent to the job owner or to the
    # users defined with the -M option. See `man qsub` for details.
    parser.add_argument(
        "-m",
        nargs=1,
        metavar="b|e|a|s|n,...",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # The list of users to which to send email about the job.
    parser.add_argument(
        "-M",
        metavar="user@host,...",
        dest="mailto",
        type=argparse_email,
        default="%s@tools.wmflabs.org" % effective_username(),
        help=argparse.SUPPRESS,
    )
    # Start the job immediately or not at all.
    parser.add_argument(
        "-now",
        nargs=1,
        metavar="y[es]|n[o]",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    parser.add_argument(
        "-N", metavar="name", dest="jobname", help="The name of the job"
    )
    # The path used for the standard output stream of the job.
    parser.add_argument(
        "-o", metavar="path", dest="log_out", help=argparse.SUPPRESS
    )
    # The priority of the job relative to other jobs.
    parser.add_argument(
        "-p",
        nargs=1,
        metavar="priority",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # A list of cluster queues, queue domains or queue instances which may be
    # used to execute this job.
    parser.add_argument(
        "-q",
        metavar="wc_queue_list",
        dest="queue",
        default="task",
        help=argparse.SUPPRESS,
    )
    # Signifies that all resource requirements following in the command line
    # will be soft requirements and are to be filled on an "as available"
    # basis.
    parser.add_argument(
        "-soft",
        nargs=0,
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # Wait for the job to complete before exiting.
    parser.add_argument(
        "-sync",
        nargs=1,
        metavar="y[es]|n[o]",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # Environment variables to be exported to the execution context of the
    # job.
    parser.add_argument(
        "-v",
        nargs=1,
        metavar="variable[=value],...",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    # Execute the job from the specified directory.
    parser.add_argument(
        "-wd",
        nargs=1,
        metavar="working_dir",
        action=QsubAction,
        dest="qsub_args",
        help=argparse.SUPPRESS,
    )
    return parser


def build_jsub_argparser():
    """Build an argparse parser for jsub specific options."""
    parser = NonAbbreviatingArgumentParser(add_help=False)
    parser.add_argument(
        "-continuous",
        action="store_true",
        help=(
            "Start a self-restarting job on the continuous queue "
            "(default if invoked as 'jstart')"
        ),
    )
    parser.add_argument(
        "-mem",
        type=argparse_memkb,
        default=524288,
        help=(
            "Requested amount of memory for the job. "
            "(integer prefixed by 'k', 'm' or 'g')"
        ),
    )
    parser.add_argument(
        "-once",
        action="store_true",
        help=(
            "Only start one job, fail if another job with the same name is "
            "already started or queued (default if invoked as "
            "'jstart' or 'qcronsub')."
        ),
    )
    parser.add_argument(
        "-quiet",
        action="store_true",
        help="If successful, don't output anything",
    )
    parser.add_argument(
        "-stderr",
        action="store_true",
        help="Send errors to stderr rather than the error output file.",
    )
    parser.add_argument(
        "-umask",
        type=argparse_octal,
        default=0o0007 if os.geteuid() > 50000 else 0o0077,
        help="Set umask for output files if they don't exist",
    )
    parser.add_argument(
        "-release",
        choices=AVAILABLE_RELEASES,
        action="store",
        metavar="OS",
        help="Choose operating system version required by this job",
    )
    return parser


def build_parser(parents=None):
    """Build argparse parser."""
    parser = NonAbbreviatingArgumentParser(
        usage="%(prog)s [options...] program [args...]",
        description="Submit a job to the job grid.",
        epilog="\n\n".join(
            [
                "\n".join(
                    textwrap.wrap(
                        "Many (but not all) qsub options are also supported."
                    )
                ),
                "\n".join(
                    textwrap.wrap(
                        "Output is appended by default to files named <job>.err and "
                        "<job>.out in your home directory (without job numbers), "
                        "including errors from starting the job itself."
                    )
                ),
                "\n".join(
                    textwrap.wrap(
                        "You must to provide an executable on the command line, "
                        "%(prog)s will not read a script from standard "
                        "input."
                    )
                ),
            ]
        ),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        parents=[build_jsub_argparser(), build_qsub_argparser()],
    )

    # Positional arguments
    parser.add_argument(
        "program",
        type=argparse_whence,
        help="Path to binary or script to execute.",
    )
    parser.add_argument(
        "program_args",
        metavar="args...",
        nargs=argparse.REMAINDER,
        help="Optional arguments for program.",
    )
    return parser


def parse_arglist(args, namespace=None):
    """Parse a collection of arguments using a lenient parser.

    The parser will raise ValueError on parse failure rather than causing
    a hard exit.
    """
    parser = ThrowingArgumentParser(
        add_help=False, parents=[build_jsub_argparser(), build_qsub_argparser()]
    )
    return parser.parse_args(args=args, namespace=namespace)


def parse_jsubrc():
    """Read options from a ~/.jsubrc file if it exists."""
    jsubrc = os.environ.get(
        "JOBUTILS_JSUBRC", os.path.join(homedir(), ".jsubrc")
    )
    if os.path.exists(jsubrc):
        args = []
        pat = re.compile(r"^(?P<opt>-[a-zA-Z]+)(?:\s+(?P<arg>[^#\s]+))?")
        with open(jsubrc, "r") as fh:
            for line in fh:
                m = pat.match(line)
                if m:
                    args.extend(g for g in m.groups() if g is not None)
        try:
            return parse_arglist(args)
        except ValueError as e:
            die("Error parsing %s: %s" % (jsubrc, e))
    else:
        return None


def read_script_comments(fh):
    """Generator to read header comments from file.

    Emitted lines have the comment characters stripped.
    """
    while True:
        peek = fh.read(2)
        if peek in ["#!", "#$"]:
            line = fh.readline()
            if peek == "#!":
                # Skip the #!... header
                continue

            yield line
        else:
            return


def parse_script_comments(namespace):
    """Read options embedded in comments in the executable.

    This mostly matches the behavior of SGE's qsub for non-binary programs.
    See '-C prefix_string' in `man qsub` for more ugly details.
    """
    pat = re.compile(r"\s*(?P<opt>-[a-zA-Z]+)(?:\s+(?P<arg>[^#\s]+))?")
    args = []
    with open(namespace.program, "r", encoding="latin1") as fh:
        for line in read_script_comments(fh):
            m = pat.match(line)
            if m:
                args.extend(g for g in m.groups() if g is not None)
    try:
        return parse_arglist(args=args, namespace=namespace)
    except ValueError as e:
        die("Error options embedded in %s: %s" % (namespace.program, e))
    return namespace


def main():
    """Submit a job to the job grid."""
    # Gather default arguments from ~/.jsubrc
    args = parse_jsubrc()
    # Parse command line options
    args = build_parser().parse_args(namespace=args)
    # Parse options embedded in the command itself
    args = parse_script_comments(args)

    # Set options based on the name we were invoked as
    script_name = os.path.basename(sys.argv[0])
    if script_name == "jstart":
        args.continuous = True
        args.once = True
    elif script_name == "qcronsub":
        args.once = True

    if args.continuous:
        args.once = True
        # Respect explict queue name if passed as an argument
        if args.queue == "task":
            args.queue = "continuous"
    else:
        # Non-continuous jobs are always treated as binary
        args.binary = True

    if args.jobname is None:
        # Take the program filename minus any extension as the job name
        args.jobname = os.path.basename(args.program).split(".")[0]

    # Compute filenames for stderr and stdout output from job
    if args.log_out is None:
        args.log_out = os.path.join(homedir(), "%s.out" % args.jobname)
    if args.log_join:
        args.log_err = args.log_out
    if args.log_err is None:
        args.log_err = os.path.join(homedir(), "%s.err" % args.jobname)

    # Ensure that stderr and stdout files exist
    touch(args.log_out, args.umask)
    touch(args.log_err, args.umask)

    # If -stderr is not given and the error output file is not a directory, we
    # redirect this script's STDERR to it.
    if not args.stderr and not os.path.isdir(args.log_err):
        try:
            sys.stderr = open(args.log_err, "a")
        except IOError as e:
            die("Failed to redirect STDERR to '%s': %s" % (args.log_err, e))

    if not os.access(args.program, os.X_OK):
        die("%s: not an executable file" % args.program)

    if args.once and is_running(args.jobname):
        die("there is a job named '%s' already active" % args.jobname)

    if not args.release:
        args.release = DEFAULT_RELEASE

    # Build argument list for calling qsub
    qsub_args = args.qsub_args or []
    qsub_args.extend(
        [
            "-j",
            as_qsub_bool(args.log_join),
            "-e",
            args.log_err,
            "-o",
            args.log_out,
            "-M",
            args.mailto,
            "-N",
            args.jobname,
            "-hard",
            "-l",
            "h_vmem=%dk" % args.mem,
            "-l",
            "release=%s" % args.release,
            "-q",
            args.queue,
            "-b",
            as_qsub_bool(args.binary),
        ]
    )

    qsub_stdin = None
    job = make_cmd(args.program, args.program_args)
    if args.continuous:
        # Send qsub a shell script that executes the given job repeatedly until
        # the program exits with exit code 0.
        qsub_stdin = textwrap.dedent(
            """\
            #!/bin/sh
            until %(job)s ; do
                echo "[%(ts)s] %(prog)s exited with code $?. Respawning..." >&2
                sleep 5
            done
            """
            % {
                "job": " ".join(pipes.quote(arg) for arg in job),
                "ts": "`date +%Y-%m-%dT%H:%M:%S`",
                "prog": args.program,
            }
        ).encode("latin1")
    else:
        qsub_args.extend(job)

    qsub = make_cmd(os.environ.get("JOBUTILS_QSUB", "/usr/bin/qsub"), qsub_args)
    try:
        proc = subprocess.Popen(
            qsub,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    except OSError as e:
        die("Failed to execute '%s': %s" % (" ".join(qsub), e))
    else:
        (out, err) = proc.communicate(qsub_stdin)
        if not args.quiet or proc.returncode != 0:
            sys.stdout.buffer.write(out)
            sys.stderr.buffer.write(err)
        sys.exit(proc.returncode)


if __name__ == "__main__":
    main()
