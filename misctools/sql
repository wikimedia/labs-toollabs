#!/usr/bin/python3 -Es
#
# Copyright (C) 2017  Tim Landscheidt
# Copyright (C) 2017 Wikimedia Foundation and contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging
import os
import os.path
import socket
import sys

logger = logging.getLogger(__name__)

ALIASES = {
    "commons": "commonswiki_p",
    "cs": "cswiki_p",
    "de": "dewiki_p",
    "en": "enwiki_p",
    "fr": "frwiki_p",
    "wikidata": "wikidatawiki_p",
    "meta": "meta_p",
}

parser = argparse.ArgumentParser(
    description=(
        "Connect to or run SQL query " "on replica or Tools database server"
    ),
    epilog=("Report bugs to Phabricator: " "https://phabricator.wikimedia.org"),
)
parser.add_argument(
    "-v",
    "--verbose",
    action="count",
    default=0,
    dest="loglevel",
    help="increase logging verbosity",
)
parser.add_argument(
    "-N",
    "--skip-column-names",
    default=None,
    action="store_true",
    help="do not write column names in results",
)
parser.add_argument(
    "--cluster",
    default="analytics",
    choices=["analytics", "web"],
    help="cluster to connect to",
)
parser.add_argument(
    "dbname", metavar="DATABASE", help="for example commonswiki_p or enwiki"
)
parser.add_argument(
    "sqlquery",
    metavar="...",
    nargs=argparse.REMAINDER,
    help="SQL query; multiple arguments will be joined by spaces",
)

args = parser.parse_args()

logging.basicConfig(
    stream=sys.stderr,
    format="%(message)s",
    level=max(logging.DEBUG, logging.WARNING - (10 * args.loglevel)),
)

domain = "{}.db.svc.wikimedia.cloud".format(args.cluster)

exec_args = ["mysql"]

replica_cnf = os.path.expanduser("~/replica.my.cnf")
if os.path.isfile(replica_cnf):
    exec_args.append("--defaults-file={}".format(replica_cnf))
elif not os.path.isfile(os.path.expanduser("~/.my.cnf")):
    exec_args.append("-p")
    logger.warning(
        "There is no configuration file for mysql to use, "
        "you will probably be unable to access the database"
    )

exec_args.append("--default-character-set=utf8mb4")

if args.skip_column_names:
    exec_args.append("-N")

db = ALIASES.get(args.dbname, args.dbname)

if db == "meta_p":
    # [[wikitech:Help:Toolforge/Database#Metadata_database]]
    # not to be confused with metawiki_p.
    server = "s7.{}".format(domain)
elif db in ["local", "tools", "tools-db", "toolsdb"]:
    server = "tools.db.svc.eqiad.wikimedia.cloud"
    db = None
else:
    if not db.endswith("_p"):
        db = "{}_p".format(db)
    server = "{}.{}".format(db[:-2], domain)
    try:
        logger.debug("Looking up %s", server)
        socket.gethostbyname(server)
        logger.info("Resolved %s to %s", db, server)
    except socket.gaierror:
        errmsg = "Could not find requested database"
        if db != args.dbname:
            errmsg += "\nMake sure to ask for a db in format of <wiki>_p"
        sys.exit(errmsg)

logger.info("Connecting to %s", server)
exec_args.extend(["-h", server])
if db:
    exec_args.append(db)

if args.sqlquery:
    if len(args.sqlquery) > 1:
        logger.warning(
            "More than one argument given; "
            "joining SQL query words with spaces."
        )
    exec_args.extend(["-e", " ".join(args.sqlquery)])

logger.debug(exec_args)
os.execvp("mysql", exec_args)
