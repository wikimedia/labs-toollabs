#!/usr/bin/python3 -Es
#
# Copyright © 2013 Marc-André Pelletier <mpelletier@wikimedia.org>
# Copyright © 2017 Wikimedia Foundation and contributors
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import argparse
import subprocess
import sys
import xml.etree.ElementTree


parser = argparse.ArgumentParser(
    description='Grid job information',
    epilog='''\
If there are multiple jobs with the same name, it is not specified which one
will have its information returned (though running jobs take precedence)

Returns 0 if no job by that name is present, 1 if it is currently running or
suspended, and 2 if the job is queued but not running.
'''
)
group = parser.add_mutually_exclusive_group()
group.add_argument(
    '-v', '--verbose', action='store_true',
    help='outputs verbose (human readable) information')
group.add_argument(
    '-q', '--quiet', action='store_true',
    help='quietly checks for the job status')
parser.add_argument(
    'jobname', metavar='JOBNAME', nargs=1,
    help='job name')

args = parser.parse_args()

proc = subprocess.Popen(['/usr/bin/qstat', '-xml'], stdout=subprocess.PIPE)
root = xml.etree.ElementTree.fromstring(proc.stdout.read())
for job in root.iter('job_list'):
    jname = job.find('JB_name').text
    if jname != args.jobname[0]:
        continue
    jstate = job.find('state').text
    running = 'r' in jstate or 's' in jstate
    if args.verbose:
        if running:
            print("Job '{}' has been running since {} as id {}".format(
                jname,
                job.find('JAT_start_time').text,
                job.find('JB_job_number').text))
        else:
            print("Job '{}' is pending as id {}".format(
                jname,
                job.find('JB_job_number').text))
    elif not args.quiet:
        print(job.find('JB_job_number').text)
    sys.exit({True: 1, False: 2}[running])

if args.verbose:
    print("No job '{}' is currently queued or running.".format(
        args.jobname[0]))
sys.exit(0)
